#library
my_data <- read.delim(file.choose())
my_date
my_data
colnames(my_data)
shape(my_data)
ncol(my_data)
df <- read.table(file.choose(),
sep =" ", header = TRUE, dec =)
df <- read.table(file.choose(),
sep =" ", header = TRUE, dec =)
df <- read.table(file.choose(),
sep =". ", header = TRUE)
df <- read.table(file.choose(),
sep =". ", header = TRUE)
df <- read.table(file.choose(),
sep =",", header = TRUE)
df
head(df)
df <- read.table(file.choose(),
sep =",", header = TRUE)
head(df)
nrows(df)
nrow())
nrow(df)
head(df)
boxplot(Y~tto,
data=airquality,
main="Different boxplots for each month",
xlab="Month Number",
ylab="Degree Fahrenheit",
col="orange",
border="brown"
)
boxplot(Y~tto,
data=df,
main="Different boxplots for each month",
xlab="Month Number",
ylab="Degree Fahrenheit",
col="orange",
border="brown"
)
boxplot(Y~tto,
data=df,
main="Falls across the groups",
xlab="Treatment",
ylab="Number of falls",
col="orange",
border="brown"
)
reticulate::repl_python()
reticulate::repl_python()
# Define deviance
deviance <- -2 * sum(dbinom_log(y, N, pi, log = TRUE))
Type
model {
model{
library(rjags)
install.packages("rjags")
library(rjags)
library(rjags)
#install.packages("rjags")
library(rjags)
install.packages("rjags")
#library(rjags)
#install.packages("rjags")
library(rjags)
install.packages("rjags")
#library(rjags)
#install.packages("rjags")
#library(rjags)
#rjags_4-14.tgz
library(utils)
#install.packages("rjags")
#library(rjags)
#rjags_4-14.tgz
#library(utils)
install.packages("rjags_4-14.tgz", repos = NULL, type="source")
#install.packages("rjags")
library(rjags)
install.packages("rjags")
#library(rjags)
#rjags_4-14.tgz
#library(utils)
#install.packages("rjags_4-14.tgz", repos = NULL, type="source")
install.packages("rjags")
#library(rjags)
#rjags_4-14.tgz
#library(utils)
install.packages("/var/folders/ps/310fvxcx6y55_xvdkg77780h0000gn/T//RtmpaKQeL7/downloaded_packages/rjags_4-14.tgz", repos = NULL, type="source")
#install.packages("rjags")
library(rjags)
#install.packages("rjags")
library(rjags)
# Define data
d <- c(0, 62.5, 125, 250, 500)
y <- c(67, 34, 193, 250, 141)
N <- c(282, 225, 290, 261, 141)
# Compile model
model_file <- "model.jags"
write(model, model_file)
# Define data
d <- c(0, 62.5, 125, 250, 500)
y <- c(67, 34, 193, 250, 141)
N <- c(282, 225, 290, 261, 141)
# Compile model
model_file <- "/Users/wentingjiang/model.jags"
write(model, model_file)
install.packages("R2OpenBUGS")
#install.packages("rjags")
#library(rjags)
#rjags_4-14.tgz
#library(utils)
#install.packages("/var/folders/ps/310fvxcx6y55_xvdkg77780h0000gn/T//RtmpaKQeL7/downl#oaded_packages/rjags_4-14.tgz", repos = NULL, type="source")
#install.packages("R2OpenBUGS")
library(R2OpenBUGS)
#install.packages("rjags")
#library(rjags)
#rjags_4-14.tgz
#library(utils)
#install.packages("/var/folders/ps/310fvxcx6y55_xvdkg77780h0000gn/T//RtmpaKQeL7/downl#oaded_packages/rjags_4-14.tgz", repos = NULL, type="source")
library(R2OpenBUGS)
# Define data
data <- list(
dose = c(0, 62.5, 125, 250, 500),
N = c(282, 225, 290, 261, 141),
y = c(67, 34, 193, 250, 141)
)
# Define parameters to monitor
parameters <- c("alpha", "beta")
# Set initial values for parameters
inits <- list(
list(alpha = 0, beta = 0),
list(alpha = 1, beta = 1)
)
# Set up model
model_file <- "model.bug"
writeLines("
model {
for (i in 1:length(dose)) {
logit(p[i]) <- alpha + beta * dose[i]
y[i] ~ dbin(p[i], N[i])
}
alpha ~ dnorm(0, 1.0E-6)
beta ~ dnorm(0, 1.0E-6)
}
", con = model_file)
# Run the model
results <- bugs(data, inits, parameters, model_file, n.chains = 2, n.iter = 1000, n.burnin = 500, n.thin = 1)
setwd("/Users/wentingjiang/Desktop/Projects/bayesian_data_kul/TaskA")
#install.packages("rjags")
install.packages("R2OpenBUGS")
install.packages("coda")
install.packages("readr")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
library(rjags)
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
library("rjags")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
x
y
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
# Write the BUGS model
model_string <- "
model {
# Priors
alpha ~ dnorm(0, 1e-6)
beta ~ dnorm(0, 1e-6)
sigma ~ dunif(0, 100)
# Likelihood
for (i in 1:n) {
y[i] ~ dnorm(alpha + beta * x[i], sigma)
}
}"
# Write the data file
data_file <- tempfile()
write.table(data.frame(x = x, y = y, n = length(y)), file = data_file, row.names = FALSE)
# Run the model
bugs_data <- list("x", "y", "n")
bugs_inits <- function() list(alpha = rnorm(1), beta = rnorm(1), sigma = runif(1, 0, 10))
bugs_params <- c("alpha", "beta", "sigma")
n.iter <- 5000
n.burnin <- 1000
n.thin <- 5
bugs_model <- bugs(model_string, data = bugs_data, inits = bugs_inits, parameters.to.save = bugs_params,
n.iter = n.iter, n.burnin = n.burnin, n.thin = n.thin, DIC = TRUE)
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
# Write the BUGS model
model_string <- "
model {
# Priors
alpha ~ dnorm(0, 1e-6)
beta ~ dnorm(0, 1e-6)
sigma ~ dunif(0, 100)
# Likelihood
for (i in 1:n) {
y[i] ~ dnorm(alpha + beta * x[i], sigma)
}
}"
# Write the data file
data_file <- tempfile()
write.table(data.frame(x = x, y = y, n = length(y)), file = data_file, row.names = FALSE)
# Run the model
bugs_data <- list("x", "y", "n")
bugs_inits <- function() list(alpha = rnorm(1), beta = rnorm(1), sigma = runif(1, 0, 10))
bugs_params <- c("alpha", "beta", "sigma")
n.iter <- 5000
n.burnin <- 1000
n.thin <- 5
bugs_model <- bugs(model_string, data = bugs_data, inits = bugs_inits, parameters.to.save = bugs_params,
n.iter = n.iter, n.burnin = n.burnin, n.thin = n.thin, DIC = TRUE)
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
install.packages("rjags")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
library("rjags")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
library("R2OpenBUGS")
library("coda")
library("readr")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
install.packages("NIMBLE")
library("R2OpenBUGS")
library("coda")
library("readr")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
#install.packages("NIMBLE")
library("R2OpenBUGS")
library("coda")
library("readr")
library("NIMBLE")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
install.packages("NIMBLE")
library("R2OpenBUGS")
library("coda")
library("readr")
#library("NIMBLE")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
install.packages("nimble")
library("R2OpenBUGS")
library("coda")
library("readr")
#library("NIMBLE")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
install.packages("nimble")
library("R2OpenBUGS")
library("coda")
library("readr")
library("nimble")
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
#install.packages("nimble")
library("R2OpenBUGS")
library("coda")
library("readr")
library("nimble")
library(nimble)
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
# Specify the model in nimble code
code <- nimbleCode({
beta0 ~ dnorm(0, 1e-6)
beta1 ~ dnorm(0, 1e-6)
tau ~ dgamma(1, 1)
for (i in 1:length(x)) {
y[i] ~ dnorm(beta0 + beta1 * x[i], tau)
}
})
# Create a nimble model object
model <- nimbleModel(code, data = list(x = x, y = y))
# Compile the model
compiled_model <- compileNimble(model)
# Sample from the posterior distribution
samples <- MCMC(compiled_model, nchains = 1, nburnin = 1000, niter = 5000)
library(nimble)
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
# Specify the model in nimble code
code <- nimbleCode({
beta0 ~ dnorm(0, 1e-6)
beta1 ~ dnorm(0, 1e-6)
tau ~ dgamma(1, 1)
for (i in 1:length(x)) {
y[i] ~ dnorm(beta0 + beta1 * x[i], tau)
}
})
# Create a nimble model object
model <- nimbleModel(code, data = list(x = x, y = y))
# Compile the model
compiled_model <- compileNimble(model)
# Sample from the posterior distribution
osteo.sim <- nimbleMCMC(code = compiled_model,
monitors = parameters,
niter = 1500,
nburnin = 750,
nchains = 3,
thin = 1,
samplesAsCodaMCMC = TRUE)
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
# Load your data into R and format it as needed
my.data <- list(x = x, y = y)
my.constants <- list()
my.inits <- list(beta0 = 0, beta1 = 0, tau = 1)
parameters <- c("beta0", "beta1", "tau")
# Specify the model in nimble code
code <- nimbleCode({
beta0 ~ dnorm(0, 1e-6)
beta1 ~ dnorm(0, 1e-6)
tau ~ dgamma(1, 1)
for (i in 1:length(x)) {
y[i] ~ dnorm(beta0 + beta1 * x[i], tau)
}
})
# Create a nimble model object
model <- nimbleModel(code, data = my.data, constants = my.constants, inits = my.inits)
# Create a nimble model object
model <- nimbleModel(code, data = list(x = x, y = y))
# Compile the model
compiled_model <- compileNimble(model)
# Sample from the posterior distribution
osteo.sim <- nimbleMCMC(code = compiled_model,
monitors = parameters,
niter = 1500,
nburnin = 750,
nchains = 3,
thin = 1,
samplesAsCodaMCMC = TRUE)
# Summarize the posterior distribution
print(summary(osteo.sim))
plot(osteo.sim)
osteo.mcmc <- as.mcmc.list(osteo.sim)
plot(osteo.mcmc)
summary(osteo.mcmc)
print(osteo.sim)
plot(osteo.sim)
#install.packages("R2OpenBUGS")
#install.packages("coda")
#install.packages("readr")
#install.packages("nimble")
library("R2OpenBUGS")
library("coda")
library("readr")
library("nimble")
# Specify the model in nimble code
code <- nimbleCode({
beta0 ~ dnorm(0, 1e-6)
beta1 ~ dnorm(0, 1e-6)
tau ~ dgamma(1, 1)
for (i in 1:length(x)) {
y[i] ~ dnorm(beta0 + beta1 * x[i], tau)
}
})
# Generate some sample data
set.seed(123)
x <- rnorm(100, mean = 5, sd = 2)
y <- rnorm(100, mean = 2 + 0.5 * x, sd = 1)
# Load your data into R and format it as needed
my.data <- list(x = x, y = y)
my.constants <- list()
my.inits <- list(beta0 = 0, beta1 = 0, tau = 1)
parameters <- c("beta0", "beta1", "tau")
# Create a nimble model object
model <- nimbleModel(code, data = my.data, constants = my.constants, inits = my.inits)
# Create a nimble model object
model <- nimbleModel(code, data = list(x = x, y = y))
# Compile the model
compiled_model <- compileNimble(model)
# Sample from the posterior distribution
osteo.sim <- nimbleMCMC(code = compiled_model,
monitors = parameters,
niter = 1500,
nburnin = 750,
nchains = 3,
thin = 1,
samplesAsCodaMCMC = TRUE)
# Summarize the posterior distribution
print(summary(osteo.sim))
